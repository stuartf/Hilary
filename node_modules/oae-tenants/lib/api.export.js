/*!
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var exportable = {};

/**
 * Register a module as exportable
 *
 * @param  {String}         moduleId                The id of the module that can be exported
 * @param  {Function}       exportFn                The function used to export the module's data
 * @param  {Context}        exportFn.ctx            Standard context object containing the current user and the current tenant
 * @param  {String}         exportFn.tenantAlias    The alias of the tenant being exported
 * @param  {Function}       exportFn.callback       The function exportFn should call with a json representation of the exported data
 */
var register = module.exports.register = function(moduleId, exportFn) {
    exportable[moduleId] = exportFn;
};

/**
 * Export the data from all registered modules
 *
 * @param  {Context}        ctx             Standard context object containing the current user and the current tenant
 * @param  {String}         tenantAlias     The alias of the tenant being exported
 * @param  {Function}       callback        Standard callback function
 * @param  {Object}         callback.err    An error that occurred, if any
 * @param  {Object}         callback.data   The exported tenant data
 */
var exportAll = module.exports.exportAll = function(ctx, tenantAlias, callback) {
    var data = {};
    var errors = [];

    var done = _.after(_.keys(exportable).length, function() {
        if (errors.length === 0) {
            return callback(null, data);
        } else {
            return callback(errors[0]);
        }
    });

    _.each(exportable, function(doExport, moduleId){
        doExport(ctx, tenantAlias, function(err, moduleData){
            if (err) {
                errors.push(err);
            } else {
                data[moduleId] = moduleData;
            }
            done();
        });
    });
};
