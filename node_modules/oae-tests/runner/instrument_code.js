/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/**
 * This file goes trough all the OAE modules their lib folder and instruments the code.
 * This allows mocha to get useful metrics when running the tests and generate a code coverage report.
 * By default the jscoverage tool instruments each file with it's filename.
 * Because we have files with similar filenames (ex: api.js) we prepend the modulename.
 */

var oae = require('oae-util/lib/oae');
var shell = require("shelljs");

var quote = function(path) {
    return '"' + path + '"';
};

var ROOT_DIR = process.argv[2];
var REPLACE_SCRIPT = quote(ROOT_DIR + '/node_modules/oae-tests/runner/replace.js');

var abortIfError = function(error, stdout, stderr) {
    if (error) {
        console.log(error);
        console.log(stdout);
        console.log(stderr);
        throw "Couldn't instrument a module. Aborting.";
    }
};

var instrument = function(dir, module) {
    var lib = ROOT_DIR + '/target/' + dir + '/lib';
    var libCov = ROOT_DIR + '/target/' + dir + '/lib-cov';
    shell.exec('jscoverage --no-highlight ' + quote(lib) + ' ' + quote(libCov), function(code, output) {
        // Replace filenames in instrumentation with entire path.
        var files = shell.find(libCov);
        for (var i=0; i < files.length; i++) {
            var path = files[i];
            if (shell.test('-f', path)) {
                shell.exec('node ' + REPLACE_SCRIPT + ' ' + path + ' ' + module + '/lib');
            }
        }
        shell.rm('-r', lib);
        shell.mv(libCov, lib);
    });
};

// Get the available OAE modules and instrument them
oae.refreshAvailableModules(function(modules) {
    for (var i = 0; i < modules.length; i++) {
        var dir = 'node_modules/' + modules[i];
        instrument(dir, modules[i]);
    }
});
