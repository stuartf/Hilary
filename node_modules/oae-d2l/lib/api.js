/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var request = require('request');

var D2LConfig = require('oae-config').config('oae-d2l');
var D2LDAO = require('./internal/dao');
var log = require('oae-logger').logger('oae-d2l');
var Server = require('oae-util/lib/server');

var D2L = require('valence');

// Some constants, Version might need to move to config for interacting with various d2l installs
var D2L_API_VERSION = '1.1';

var _getD2LAPIPrefix = function(section) {
    return '/d2l/api/' + section + '/' + D2L_API_VERSION;
};

/**
 * Determine if the currently logged in user is authenticated to D2L
 */
var isAuthed = module.exports.isAuthed = function(ctx, redirect, callback) {
    _getUserSession(ctx, function(err, session) {
        if (!err && session) {
            return callback(null, true, null);
        }
        // No cached credentials
        return callback(null, false, _getAuthUrl(ctx, redirect));
    });
};

/**
 * Save the current user's D2L credentials so we don't have to keep asking them
 */
var cacheUserCreds = module.exports.cacheUserCreds = function(ctx, d2lCallbackUrl, callback) {
    var config = _getConfig(ctx.tenant().alias);
    var userContext = config.appContext.createUserContext(config.host, config.port, d2lCallbackUrl);
    if (userContext && userContext.userId) {
        return D2LDAO.saveD2LUser(ctx.user().id, userContext.userId, userContext.userKey, callback);
    }
    return callback({'code': 500, 'msg': 'Could not get D2L userContext'});
};

/**
 * Get the current user's enrollments
 */
var getEnrollments = module.exports.getEnrollments = function(ctx, callback) {
    var url = _getD2LAPIPrefix('lp') + '/enrollments/myenrollments/';
    _getSignedUrl(ctx, url, 'GET', function(err, signedUrl) {
        if (err) {
            return callback(err);
        }
        log().trace(signedUrl);
        // Only get Course enrollments
        signedUrl += '&orgUnitTypeId=3';
        request(signedUrl, function(err, response, body) {
            if (err) {
                return callback(err);
            }
            body = JSON.parse(body);
            _unpackPagedEnrollments(ctx, body.PagingInfo, body.Items, function(err, courses) {
                if (err) {
                    return callback(err);
                }
                // Filter courses to only those which are active and we can access
                courses = _.filter(courses, function(course) {
                    return (course.Access.IsActive && course.Access.CanAccess);
                });
                // Pull out the fields we care about
                courses = _.map(courses, function(course) {
                    return _.pick(course.OrgUnit, 'Id', 'Name', 'Code');
                });

                var done = _.after(courses.length, function() {
                    callback(null, _.filter(courses, function(course) {
                        return (! _.isEmpty(course.assignments));
                    }));
                });

                // Attach the list of open assignments
                _.each(courses, function(course) {
                    _getDropboxes(ctx, course.Id, function(err, dropboxes) {
                        if (err) {
                            return callback(err);
                        }
                        dropboxes = _.map(dropboxes, function(dropbox) {
                            return _.pick(dropbox, 'Id', 'Name', 'CustomInstructions', 'Availability');
                        });
                        course.assignments = dropboxes;
                        done();
                    });
                });
            });
        });
    });
};

/**
 * Keep getting courses until we have all of them
 */
var _unpackPagedEnrollments = function(ctx, pagingInfo, items, callback) {
    if (! pagingInfo.HasMoreItems) {
        return callback(null, items);
    }
    var url = _getD2LAPIPrefix('lp') + '/enrollments/myenrollments/';
    _getSignedUrl(ctx, url, 'GET', function(err, signedUrl) {
        if (err) {
            return callback(err);
        }
        log().trace(signedUrl);
        // Only get Course enrollments and start from the bookmark
        signedUrl += '&orgUnitTypeId=3&bookmark=' + pagingInfo.Bookmark;
        request(signedUrl, function(err, response, body) {
            if (err) {
                return callback(err);
            }
        });
        _unpackPagedEnrollments(ctx, body.pagingInfo, _.union(items, body.Items), callback);
    });
};

var _getDropboxes = function(ctx, courseId, callback) {
    var url = _getD2LAPIPrefix('le') + '/' + courseId + '/dropbox/folders/';
    _getSignedUrl(ctx, url, 'GET', function(err, signedUrl) {
        if (err) {
            return callback(err);
        }
        log().trace(signedUrl);
        request(signedUrl, function(err, response, body) {
            if (err) {
                return callback(err);
            }
            body = JSON.parse(body);
            callback(null, body);
        });
    });
};

/**
 * Get the d2l auth url for this tenant
 */
var _getAuthUrl = function(ctx, redirect) {
    redirect = redirect || '/me';
    var config = _getConfig(ctx.tenant().alias);
    var callbackProtocol = Server.useHttps() ? 'https://' : 'http://';
    var callbackUrl = callbackProtocol + ctx.tenant().host + '/api/d2l/callback?oaeContext=' + redirect;
    return config.appContext.createUrlForAuthentication(config.protocol + config.host, config.port, callbackUrl);
};

/**
 * Get a d2l user context for the current OAE user
 */
var _getUserSession = function(ctx, callback) {
    D2LDAO.getD2LUser(ctx.user().id, function(err, d2lUser) {
        if (err) {
            return callback(err);
        }
        var config = _getConfig(ctx.tenant().alias);
        var session = config.appContext.createUserContextWithValues(config.host, config.port, d2lUser.d2lUserId, d2lUser.d2lUserKey);
        if (_.isEmpty(d2lUser)) {
            return callback({'code': 500, 'msg': 'No cached D2L user for that ID'});
        }
        log().trace(session);
        return callback(null, session);
    });
};

/**
 * Get the D2L config values for a tenant
 */
var _getConfig = function(tenantAlias) {
    var config = {};
    var _getConfigVal = function(key) {
        return D2LConfig.getValue(tenantAlias, 'd2l', key);
    };
    config.protocol = _getConfigVal('protocol');
    config.host = _getConfigVal('host');
    config.port = _getConfigVal('port');
    var url = config.protocol + config.host + ':' + config.port;
    var appId = _getConfigVal('appId');
    var appKey = _getConfigVal('appKey');
    config.appContext = new D2L.ApplicationContext(url, appId, appKey);
    return config;
};

/**
 * Get a signed authenticated url
 */
var _getSignedUrl = function(ctx, req, method, callback) {
    var config = _getConfig(ctx.tenant().alias);
    _getUserSession(ctx, function(err, session){
        if (err) {
            return callback(err);
        }
        if (! session) {
            return callback({'code': 500, 'msg': 'Could not get D2L userContext'});
        }
        return callback(null, config.protocol + session.createAuthenticatedUrl(req, method));
    });
};
